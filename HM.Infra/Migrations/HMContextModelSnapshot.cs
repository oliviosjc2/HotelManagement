// <auto-generated />
using System;
using HM.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HM.Infra.Migrations
{
    [DbContext(typeof(HMContext))]
    partial class HMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("hm")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HM.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptMinors")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<int>("AdminUserId")
                        .HasColumnType("integer");

                    b.Property<int>("BookingConfirmationTimeInMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("AdminUserId");

                    b.ToTable("Hotels", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.HotelAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("HotelAdminUserId")
                        .HasColumnType("integer");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("HotelAdminUserId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelAdmins", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.HotelEmployees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("EmployeeUserId")
                        .HasColumnType("integer");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeUserId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelEmployees", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.HotelPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<string>("BucketURL")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("ItsMainPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelUserId");

                    b.ToTable("HotelPhotos", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiresIn")
                        .HasColumnType("timestamp");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("PaymentDeadline")
                        .HasColumnType("timestamp");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("ReserveId")
                        .HasColumnType("integer");

                    b.Property<int>("SuiteCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("SuiteId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasPrecision(21, 2)
                        .HasColumnType("numeric(21,2)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("Paid");

                    b.HasIndex("PaymentDate");

                    b.HasIndex("SuiteCategoryId");

                    b.HasIndex("SuiteId");

                    b.ToTable("Invoices", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.Reserve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Paid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("SuiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("HotelId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("SuiteId");

                    b.ToTable("Reserves", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.ReserveCustomerInformations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CustomerBirthdayDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("CustomerCellphone")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("CustomerFullname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("ReserveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReserveId");

                    b.ToTable("ReserveCustomerInformations", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.Suite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<decimal>("DailyPriceDefault")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(21, 2)
                        .HasColumnType("numeric(21,2)")
                        .HasDefaultValue(10m);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("PeopleCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10);

                    b.Property<int>("SuiteCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelUserId");

                    b.HasIndex("SuiteCategoryId");

                    b.ToTable("Suites", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.SuiteCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("HotelId")
                        .HasColumnType("integer");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelUserId");

                    b.ToTable("SuiteCategories", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.SuitePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<string>("BucketURL")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("HotelUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("ItsMainPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("SuiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HotelUserId");

                    b.HasIndex("SuiteId");

                    b.ToTable("SuitePhotos", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.SuiteSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("SuiteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuiteId");

                    b.ToTable("SuiteSchedules", "hm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "hm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "hm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "hm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "hm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "hm");
                });

            modelBuilder.Entity("HM.Domain.Entities.Hotel", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "AdminUser")
                        .WithMany("Hotels")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("HM.Domain.Entities.HotelAdmin", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "HotelAdminUser")
                        .WithMany("HotelAdmins")
                        .HasForeignKey("HotelAdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Hotel", "Hotel")
                        .WithMany("HotelAdmins")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("HotelAdminUser");
                });

            modelBuilder.Entity("HM.Domain.Entities.HotelEmployees", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "EmployeeUser")
                        .WithMany("HotelEmployees")
                        .HasForeignKey("EmployeeUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Hotel", "Hotel")
                        .WithMany("HotelEmployees")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeUser");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HM.Domain.Entities.HotelPhoto", b =>
                {
                    b.HasOne("HM.Domain.Entities.Hotel", "Hotel")
                        .WithMany("HotelPhotos")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "HotelUser")
                        .WithMany("HotelPhotos")
                        .HasForeignKey("HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("HotelUser");
                });

            modelBuilder.Entity("HM.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("HM.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Invoices")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.SuiteCategory", "SuiteCategory")
                        .WithMany("Invoices")
                        .HasForeignKey("SuiteCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Suite", "Suite")
                        .WithMany("Invoices")
                        .HasForeignKey("SuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Suite");

                    b.Navigation("SuiteCategory");
                });

            modelBuilder.Entity("HM.Domain.Entities.Reserve", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "CustomerUser")
                        .WithMany("Reserves")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Reserves")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Invoice", "Invoice")
                        .WithOne("Reserve")
                        .HasForeignKey("HM.Domain.Entities.Reserve", "InvoiceId");

                    b.HasOne("HM.Domain.Entities.Suite", "Suite")
                        .WithMany("Reserves")
                        .HasForeignKey("SuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerUser");

                    b.Navigation("Hotel");

                    b.Navigation("Invoice");

                    b.Navigation("Suite");
                });

            modelBuilder.Entity("HM.Domain.Entities.ReserveCustomerInformations", b =>
                {
                    b.HasOne("HM.Domain.Entities.Reserve", "Reserve")
                        .WithMany("CustomerInformations")
                        .HasForeignKey("ReserveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reserve");
                });

            modelBuilder.Entity("HM.Domain.Entities.Suite", b =>
                {
                    b.HasOne("HM.Domain.Entities.Hotel", "Hotel")
                        .WithMany("Suites")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "HotelUser")
                        .WithMany("Suites")
                        .HasForeignKey("HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.SuiteCategory", "SuiteCategory")
                        .WithMany("Suites")
                        .HasForeignKey("SuiteCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("HotelUser");

                    b.Navigation("SuiteCategory");
                });

            modelBuilder.Entity("HM.Domain.Entities.SuiteCategory", b =>
                {
                    b.HasOne("HM.Domain.Entities.Hotel", "Hotel")
                        .WithMany("SuiteCategories")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "HotelUser")
                        .WithMany("SuiteCategories")
                        .HasForeignKey("HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("HotelUser");
                });

            modelBuilder.Entity("HM.Domain.Entities.SuitePhoto", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", "HotelUser")
                        .WithMany("SuitePhotos")
                        .HasForeignKey("HotelUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Suite", "Suite")
                        .WithMany("SuitePhotos")
                        .HasForeignKey("SuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelUser");

                    b.Navigation("Suite");
                });

            modelBuilder.Entity("HM.Domain.Entities.SuiteSchedule", b =>
                {
                    b.HasOne("HM.Domain.Entities.Suite", "Suite")
                        .WithMany("Schedules")
                        .HasForeignKey("SuiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HM.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HM.Domain.Entities.Hotel", b =>
                {
                    b.Navigation("HotelAdmins");

                    b.Navigation("HotelEmployees");

                    b.Navigation("HotelPhotos");

                    b.Navigation("Invoices");

                    b.Navigation("Reserves");

                    b.Navigation("SuiteCategories");

                    b.Navigation("Suites");
                });

            modelBuilder.Entity("HM.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("HotelAdmins");

                    b.Navigation("HotelEmployees");

                    b.Navigation("HotelPhotos");

                    b.Navigation("Hotels");

                    b.Navigation("Reserves");

                    b.Navigation("SuiteCategories");

                    b.Navigation("SuitePhotos");

                    b.Navigation("Suites");
                });

            modelBuilder.Entity("HM.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Reserve");
                });

            modelBuilder.Entity("HM.Domain.Entities.Reserve", b =>
                {
                    b.Navigation("CustomerInformations");
                });

            modelBuilder.Entity("HM.Domain.Entities.Suite", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Reserves");

                    b.Navigation("Schedules");

                    b.Navigation("SuitePhotos");
                });

            modelBuilder.Entity("HM.Domain.Entities.SuiteCategory", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Suites");
                });
#pragma warning restore 612, 618
        }
    }
}
